	字符串和编码
	Python 3的字符串使用Unicode，直接支持多种语言。
	str和bytes互相转换时，需要指定编码，最常用的编码是utf-8。
1、对于单个字符的编码：
	ord（）函数：获取字符的整数(编码)表示。 ord（‘A’）//65
	chr（）函数：把编码转为对应的字符.chr（65）//'A'
2、Python的字符串类型是str，在内存中以Unicode表示，
3、在网络上传输或者保存在磁盘里，需要把str变为以字节为单位的bytes。
	'ABC'和b‘ABC’：前者是str，后者内容显示和前者一样，但bytes的每个字符都只占用一个字节。

	1》encode（）：在网络上传输或者保存在磁盘里，需要把str变为以字节为单位的bytes。
				用Unicode表示的str通过encode（）方法编码为指定的bytes：
		‘abc’.encode('ascii')//b'abc'
		'中文'.encode('utf-8')//b'\xe4\xb8\xad\xe6\x96\x97'
		
		*纯英文的str可以用ASCII编码为bytes，内容是一样的
		 含有中为的str可以用utf-8编码为bytes；
		 含有中文的str无法用ASCII编码，因为中文的编码范围超过了ASCII编码的范围。会报错。
		 在bytes中，无法显示ASCII字符的字节，用\x##显示
	
	2》decode（）；从磁盘中或者网络上读取字节流，读到的数据就是bytes，要把bytes变为str
		b'abc'.decode('ascii')//'abc'
		b'\xe4\xb8\xad\xe6\x96\x97'.decode('utf-8')//'中文'
		
	3》len（）函数：
		计算str包含多少个字符（计算的是str的字符数）：
			len（‘abc’）//3  len('中文')//3；	
		如果换成bytes，len()计算的是字节数：
			len(b'abc')  //3
			len(b'\xe4\xb8\xad\xe6\x96\x97')  //6
			len('中文'.encode('utf-8'))   //6
		
		*一个中文字符经过utf-8编码后通常会占用3个字节，一个英文字符占用1个字节
		早操作字符串时，经常遇到str和bytes的互相转换，
		为了避免乱码问题，始终坚持使用utf-8对str和bytes进行转换。
4、格式化
	%d：整数
	%f：浮点数
	%s：字符串
	%x：十六进制整数
	格式化整数和浮点数可以指定是否补0和整数与小数的位数：
		>>>'%2d-%02d'%(3,1)//'3-01'
		>>>'%.2f'%3.1415926 //'3.14'
	如果不确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
		>>>‘age：%s.grnder:%s’%(25,True)  //'age:25.gender:True'
	%前有几个占位符，后面就跟几个变量或者值，顺序对应好，只有一个占位符，括号可以省略。
	当%为普通字符时，需要转义：%%表示一个%
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	